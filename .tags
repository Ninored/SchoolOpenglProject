!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
EN_STATE	.\src\GameState.h	/^enum EN_STATE {$/;"	g
FL_Init	.\src\FontLoader.c	/^int FL_Init(void)$/;"	f
FL_Quit	.\src\FontLoader.c	/^void FL_Quit(void)$/;"	f
FONTLOADER_H_	.\src\FontLoader.h	9;"	d
GAMESTATE_H_	.\src\GameState.h	9;"	d
IL_Destroy	.\src\ImageLoader.c	/^void IL_Destroy(SDL_Surface *surface)$/;"	f
IL_Init	.\src\ImageLoader.c	/^int IL_Init(void)$/;"	f
IL_Load	.\src\ImageLoader.c	/^void IL_Load(const char *path, SDL_Surface *surface)$/;"	f
IL_Quit	.\src\ImageLoader.c	/^void IL_Quit(void)$/;"	f
IMAGELOADER_H_	.\src\ImageLoader.h	9;"	d
MAINMENU_H_	.\src\MainMenu.h	9;"	d
STATE_MAINMENU	.\src\GameState.h	/^	STATE_MAINMENU,$/;"	e	enum:EN_STATE
STATE_UNKNOW	.\src\GameState.h	/^	STATE_UNKNOW$/;"	e	enum:EN_STATE
S_MainMenu_Compute	.\src\MainMenu.c	/^void S_MainMenu_Compute(void)$/;"	f
S_MainMenu_Draw	.\src\MainMenu.c	/^void S_MainMenu_Draw(void)$/;"	f
S_MainMenu_Event	.\src\MainMenu.c	/^void S_MainMenu_Event(void)	\/\/ lors d'un evenement$/;"	f
S_MainMenu_Init	.\src\MainMenu.c	/^int S_MainMenu_Init(void)$/;"	f
S_MainMenu_Quit	.\src\MainMenu.c	/^void S_MainMenu_Quit(void)$/;"	f
TEXDestroy	.\src\Textures.c	/^void TEXDestroy(Texture *tex)$/;"	f
TEXLoad	.\src\Textures.c	/^void TEXLoad(const char *path, SDL_Renderer *renderer, Texture *tex)$/;"	f
TEXTURES_H	.\src\Textures.h	2;"	d
Texture	.\src\Textures.h	/^} Texture;$/;"	t	typeref:struct:__anon1
Texture_MainBackground	.\src\MainMenu.c	/^static Texture *Texture_MainBackground;$/;"	v	file:
WINDOWS_H	.\src\main.c	16;"	d	file:
WINDOWS_W	.\src\main.c	17;"	d	file:
Window	.\src\GameState.h	/^SDL_Window *Window;	\/\/ Fenetre SDL Tout le long de notre programme$/;"	v
_ExitGame	.\src\GameState.c	/^void _ExitGame(void)$/;"	f
_StateChange	.\src\GameState.c	/^void _StateChange(enum EN_STATE newState)$/;"	f
_StateCompute	.\src\GameState.c	/^void _StateCompute(void)$/;"	f
_StateDraw	.\src\GameState.c	/^void _StateDraw(void)$/;"	f
_StateEvent	.\src\GameState.c	/^void _StateEvent(void)$/;"	f
beginState	.\src\main.c	/^void beginState(void)$/;"	f
computeState	.\src\GameState.c	/^static void (*computeState)(void) = NULL;$/;"	v	file:
currentState	.\src\GameState.c	/^static enum EN_STATE currentState = STATE_UNKNOW;$/;"	v	typeref:enum:EN_STATE	file:
drawState	.\src\GameState.c	/^static void (*drawState)(void) = NULL;$/;"	v	file:
endState	.\src\main.c	/^void endState(void)$/;"	f
event	.\src\MainMenu.c	/^static SDL_Event event;$/;"	v	file:
eventState	.\src\GameState.c	/^static void (*eventState)(void) = NULL;$/;"	v	file:
height	.\src\Textures.h	/^	int width, height;	\/\/ Taille de la texture$/;"	m	struct:__anon1
initState	.\src\GameState.c	/^static int (*initState)(void) = NULL;$/;"	v	file:
main	.\src\main.c	/^int main(int argc, char **argv)$/;"	f
posX	.\src\Textures.h	/^	int posX, posY;		\/\/ Position de la texture$/;"	m	struct:__anon1
posY	.\src\Textures.h	/^	int posX, posY;		\/\/ Position de la texture$/;"	m	struct:__anon1
quitState	.\src\GameState.c	/^static void (*quitState)(void) = NULL;$/;"	v	file:
render	.\src\MainMenu.c	/^static SDL_Renderer *render = NULL;	\/\/ render pour afficher a l'ecran$/;"	v	file:
running	.\src\GameState.h	/^int running;$/;"	v
tex	.\src\Textures.h	/^	SDL_Texture *tex;	\/\/ La texture au format pixels$/;"	m	struct:__anon1
width	.\src\Textures.h	/^	int width, height;	\/\/ Taille de la texture$/;"	m	struct:__anon1
